<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fujfu.dao.recommend.RecommendFriendshipMapper" >
  <resultMap id="BaseResultMap" type="com.fujfu.pojo.recommend.RecommendFriendshipVO" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="recommend_user_id" property="recommendUserId" jdbcType="INTEGER" />
    <result column="recommend_ref_user_id" property="recommendRefUserId" jdbcType="INTEGER" />
    <result column="regist_time" property="registTime" jdbcType="INTEGER" />
    <result column="reward_term" property="rewardTerm" jdbcType="INTEGER" />
    <result column="invest_loan_id" property="investLoanId" jdbcType="INTEGER" />
    <result column="invest_loan_name" property="investLoanName" jdbcType="VARCHAR" />
    <result column="invest_amount" property="investAmount" jdbcType="DECIMAL" />
    <result column="invest_time" property="investTime" jdbcType="INTEGER" />
    <result column="loan_time" property="loanTime" jdbcType="INTEGER" />
    <result column="reward_amount" property="rewardAmount" jdbcType="DECIMAL" />
    <result column="reward_time" property="rewardTime" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="created" property="created" jdbcType="INTEGER" />
    <result column="updated" property="updated" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="recommenFriendsMap" type="com.fujfu.pojo.recommend.RecommenFriendsPOJO" extends="BaseResultMap">
    <result column="userName" property="userName" />
    <result column="realName" property="realName" />
    <result column="investTimeStr" property="investTimeStr" />
    <result column="registTimeStr" property="registTimeStr" />
    <result column="rewardTermStr" property="rewardTermStr" />   
  </resultMap>
  <sql id="Base_Column_List" >
    id, recommend_user_id, recommend_ref_user_id, regist_time, reward_term, invest_loan_id, 
    invest_loan_name, invest_amount, invest_time, loan_time, reward_amount, reward_time, 
    status, remark, created, updated
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from fu_recommend_friendship
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from fu_recommend_friendship
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fujfu.pojo.recommend.RecommendFriendshipVO" >
    insert into fu_recommend_friendship (id, recommend_user_id, recommend_ref_user_id, 
      regist_time, reward_term, invest_loan_id, 
      invest_loan_name, invest_amount, invest_time, 
      loan_time, reward_amount, reward_time, 
      status, remark, created, 
      updated)
    values (#{id,jdbcType=INTEGER}, #{recommendUserId,jdbcType=INTEGER}, #{recommendRefUserId,jdbcType=INTEGER}, 
      #{registTime,jdbcType=INTEGER}, #{rewardTerm,jdbcType=INTEGER}, #{investLoanId,jdbcType=INTEGER}, 
      #{investLoanName,jdbcType=VARCHAR}, #{investAmount,jdbcType=DECIMAL}, #{investTime,jdbcType=INTEGER}, 
      #{loanTime,jdbcType=INTEGER}, #{rewardAmount,jdbcType=DECIMAL}, #{rewardTime,jdbcType=INTEGER}, 
      #{status,jdbcType=CHAR}, #{remark,jdbcType=VARCHAR}, #{created,jdbcType=INTEGER}, 
      #{updated,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.fujfu.pojo.recommend.RecommendFriendshipVO" >
    insert into fu_recommend_friendship
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="recommendUserId != null" >
        recommend_user_id,
      </if>
      <if test="recommendRefUserId != null" >
        recommend_ref_user_id,
      </if>
      <if test="registTime != null" >
        regist_time,
      </if>
      <if test="rewardTerm != null" >
        reward_term,
      </if>
      <if test="investLoanId != null" >
        invest_loan_id,
      </if>
      <if test="investLoanName != null" >
        invest_loan_name,
      </if>
      <if test="investAmount != null" >
        invest_amount,
      </if>
      <if test="investTime != null" >
        invest_time,
      </if>
      <if test="loanTime != null" >
        loan_time,
      </if>
      <if test="rewardAmount != null" >
        reward_amount,
      </if>
      <if test="rewardTime != null" >
        reward_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="updated != null" >
        updated,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="recommendUserId != null" >
        #{recommendUserId,jdbcType=INTEGER},
      </if>
      <if test="recommendRefUserId != null" >
        #{recommendRefUserId,jdbcType=INTEGER},
      </if>
      <if test="registTime != null" >
        #{registTime,jdbcType=INTEGER},
      </if>
      <if test="rewardTerm != null" >
        #{rewardTerm,jdbcType=INTEGER},
      </if>
      <if test="investLoanId != null" >
        #{investLoanId,jdbcType=INTEGER},
      </if>
      <if test="investLoanName != null" >
        #{investLoanName,jdbcType=VARCHAR},
      </if>
      <if test="investAmount != null" >
        #{investAmount,jdbcType=DECIMAL},
      </if>
      <if test="investTime != null" >
        #{investTime,jdbcType=INTEGER},
      </if>
      <if test="loanTime != null" >
        #{loanTime,jdbcType=INTEGER},
      </if>
      <if test="rewardAmount != null" >
        #{rewardAmount,jdbcType=DECIMAL},
      </if>
      <if test="rewardTime != null" >
        #{rewardTime,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=CHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        #{created,jdbcType=INTEGER},
      </if>
      <if test="updated != null" >
        #{updated,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fujfu.pojo.recommend.RecommendFriendshipVO" >
    update fu_recommend_friendship
    <set >
      <if test="recommendUserId != null" >
        recommend_user_id = #{recommendUserId,jdbcType=INTEGER},
      </if>
      <if test="recommendRefUserId != null" >
        recommend_ref_user_id = #{recommendRefUserId,jdbcType=INTEGER},
      </if>
      <if test="registTime != null" >
        regist_time = #{registTime,jdbcType=INTEGER},
      </if>
      <if test="rewardTerm != null" >
        reward_term = #{rewardTerm,jdbcType=INTEGER},
      </if>
      <if test="investLoanId != null" >
        invest_loan_id = #{investLoanId,jdbcType=INTEGER},
      </if>
      <if test="investLoanName != null" >
        invest_loan_name = #{investLoanName,jdbcType=VARCHAR},
      </if>
      <if test="investAmount != null" >
        invest_amount = #{investAmount,jdbcType=DECIMAL},
      </if>
      <if test="investTime != null" >
        invest_time = #{investTime,jdbcType=INTEGER},
      </if>
      <if test="loanTime != null" >
        loan_time = #{loanTime,jdbcType=INTEGER},
      </if>
      <if test="rewardAmount != null" >
        reward_amount = #{rewardAmount,jdbcType=DECIMAL},
      </if>
      <if test="rewardTime != null" >
        reward_time = #{rewardTime,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=INTEGER},
      </if>
      <if test="updated != null" >
        updated = #{updated,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fujfu.pojo.recommend.RecommendFriendshipVO" >
    update fu_recommend_friendship
    set recommend_user_id = #{recommendUserId,jdbcType=INTEGER},
      recommend_ref_user_id = #{recommendRefUserId,jdbcType=INTEGER},
      regist_time = #{registTime,jdbcType=INTEGER},
      reward_term = #{rewardTerm,jdbcType=INTEGER},
      invest_loan_id = #{investLoanId,jdbcType=INTEGER},
      invest_loan_name = #{investLoanName,jdbcType=VARCHAR},
      invest_amount = #{investAmount,jdbcType=DECIMAL},
      invest_time = #{investTime,jdbcType=INTEGER},
      loan_time = #{loanTime,jdbcType=INTEGER},
      reward_amount = #{rewardAmount,jdbcType=DECIMAL},
      reward_time = #{rewardTime,jdbcType=INTEGER},
      status = #{status,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      created = #{created,jdbcType=INTEGER},
      updated = #{updated,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
   <!--通过被推荐人查询未奖励，未放款且未过期 的推荐人  -->  
   <select id="selectRecommedUserUnLoan" resultMap="BaseResultMap"  >
    select 
    <include refid="Base_Column_List" />
    from fu_recommend_friendship
    where recommend_ref_user_id = #{recommendRefUserId}
    and  reward_term &gt;=#{investTime}
    and  invest_amount = 0   
  </select> 
  
  <!--查询准备准备奖励数据  -->  
   <select id="selectPreparedRecommed" resultMap="BaseResultMap"  >
    select 
    <include refid="Base_Column_List" />
    from fu_recommend_friendship
    where invest_amount != 0
    and  status = 1
    order by created desc 
    limit 0,10
    
  </select>   
  <resultMap id="RecommendRewardMap" type="com.fujfu.pojo.recommend.RecommendRewardPOJO" >
    <id column="recommendUserId" property="recommendUserId" />
    <result column="userName" property="userName" />
    <result column="realName" property="realName" />
    <result column="totalNum" property="totalNum" />
    <result column="effectNum" property="effectNum" />
    <result column="totalMoney" property="totalMoney" />
  </resultMap>
  
  <!-- 查询推荐奖励 -->
  <select id="findRecommendReward" resultMap="RecommendRewardMap"  >
    select a.recommend_user_id as recommendUserId,a.totalNum,a.username,a.realname,ifnull(b.effectNum,0) as effectNum,ifnull(b.totalMoney,0) as totalMoney 
from (select recommend_user_id,count(frf.recommend_user_id) as totalNum,fu.username as username,fu.realname as realname 
from fu_recommend_friendship frf left join fu_users fu on frf.recommend_user_id = fu.user_id 
group by recommend_user_id) as a left join
(select recommend_user_id,count(recommend_user_id) as effectNum ,sum(reward_amount) as totalMoney from fu_recommend_friendship where `status` = 2  
group by recommend_user_id) b on a.recommend_user_id = b.recommend_user_id  limit #{page.startOfPage},#{page.pageSize}  
  </select>
  <select id="countRecommendReward" resultType="java.lang.Integer">
		select count(*) from (select * from fu_recommend_friendship group by recommend_user_id) a
  </select>
  <!-- 查询推荐奖励  好友详情-->
  <select id="findRecommendRewardDetailByUid" resultMap="recommenFriendsMap"  >
  select fu.userName,fu.realName,frf.invest_amount,frf.invest_time,frf.regist_time,frf.reward_term,frf.reward_amount 
  from fu_recommend_friendship frf left join 
  fu_users fu on frf.recommend_ref_user_id= fu.user_id 
  where frf.recommend_user_id=#{uid} 
  order by frf.created desc limit #{page.startOfPage},#{page.pageSize}
  </select>
  <select id="countRecommendRewardDetailByUid" resultType="java.lang.Integer">
		select count(*) from fu_recommend_friendship frf left join 
  fu_users fu on frf.recommend_ref_user_id= fu.user_id 
  where frf.recommend_user_id =#{uid} 
  </select>
  
  <!--前台通过用户编号查询所有推荐好友信息  -->  
   <select id="selectRecommenFriendsListByUserid" resultMap="recommenFriendsMap"  >
    select 
   fu.userName,fu.realName as realName,frf.invest_amount,frf.invest_time,ifnull(from_unixtime(frf.invest_time,'%Y-%m-%d'),'') as investTimeStr,frf.regist_time,from_unixtime(frf.regist_time,'%Y-%m-%d') as registTimeStr,frf.reward_term,from_unixtime(frf.reward_term,'%Y-%m-%d') as rewardTermStr,frf.reward_amount
    from fu_recommend_friendship  frf
    left join 
    fu_users fu   
    on frf.recommend_ref_user_id= fu.user_id
    where frf.recommend_user_id=#{userid}
    order by frf.created desc 
    limit #{startNum},#{pageSize}
    
  </select>
  <select id="countRecommenFriendsList" resultType="java.lang.Integer"  >
    select 
   count(frf.id)
    from fu_recommend_friendship  frf    
    where 
     frf.recommend_user_id=#{userid}   
  </select>
    
  <resultMap id="RecommendVoMap" type="com.fujfu.pojo.recommend.RecommendPOJO"
		extends="BaseResultMap">
		<result column="ausername" property="ausername" />
		<result column="arealname" property="arealname" />
		<result column="busername" property="busername" />
		<result column="brealname" property="brealname" />
	</resultMap>
	
  <!-- 分页查询条件 -->
	<sql id="queryCondition">
		<trim prefix="where" prefixOverrides="and|or">
			<if test="recommendQueryVo.busername!=null and recommendQueryVo.busername!=''">
				and fu2.username like "%"#{recommendQueryVo.busername}"%"
			</if>
			<if test="recommendQueryVo.startTime!=null and recommendQueryVo.startTime!=''">
    <![CDATA[  and frf.reward_time >= #{recommendQueryVo.startTime}]]>
			</if>
			<if test="recommendQueryVo.endTime!=null and recommendQueryVo.endTime!=''">
    <![CDATA[  and frf.reward_time <= #{recommendQueryVo.endTime}]]>
			</if>			
		</trim>
	</sql>
	<!-- 分页查询 -->
	<select id="findRecommendedByCondition" resultMap="RecommendVoMap">
		select frf.*,fu1.username as ausername,fu1.realname as arealname,fu2.username as busername,fu2.realname as brealname 
from fu_recommend_friendship frf 
left join fu_users fu1 on frf.recommend_user_id = fu1.user_id 
left join fu_users fu2 on frf.recommend_ref_user_id = fu2.user_id 
		<include refid="queryCondition" /> 
		order by created desc limit
		#{page.startOfPage},#{page.pageSize}
	</select>
	<!-- 分页查询记录数 -->
	<select id="countRecommendedByCondition" resultType="java.lang.Integer">
		select count(*) from (select frf.*,fu1.username as ausername,fu1.realname as arealname,fu2.username as busername,fu2.realname as brealname 
from fu_recommend_friendship frf 
left join fu_users fu1 on frf.recommend_user_id = fu1.user_id 
left join fu_users fu2 on frf.recommend_ref_user_id = fu2.user_id 
		<include refid="queryCondition" />) a
	</select>
  
	<!-- 前台邀请页面展示字段查询 -->
	<!-- 查询条件 -->
	<sql id="queryCondition1">
		<trim prefix="where" prefixOverrides="and|or">
			<if test="rewardTime>0">
				and frf.reward_time &lt;#{rewardTime} 
				and frf.reward_time &gt;(#{rewardTime} - 86400)
			</if>
			<if test="status!= null and status!=''">
				and frf.status=#{status}
			</if>
			<if test="userId!= null">
				and frf.recommend_user_id=#{userId}
			</if>
		</trim>
	</sql>
   <select id="selectSumAmountByQueryCondition" resultType="java.lang.String"  >
    select 
  IFNULL(sum(frf.reward_amount),0)
    from fu_recommend_friendship  frf    
   		<include refid="queryCondition1" />
     
  </select>
</mapper>